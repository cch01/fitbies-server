# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  nickname: String
  firstName: String
  lastName: String
  email: String
  type: UserType
  status: UserCurrentStates
  isActivated: Boolean
  registeredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserType {
  CLIENT
  ADMIN
}

enum UserCurrentStates {
  ONLINE
  MEETING
  OFFLINE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserEdge {
  cursor: String!
  node: User!
}

type UserConnection {
  edges: [UserEdge!]
  nodes: [User!]
  endCursor: String
  startCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  totalCount: Int
  dataCountInPage: Int
}

type PersonalMessage {
  from: User!
  to: ID!
  content: String!
  sentAt: DateTime!
}

type UserState {
  user: User!
  state: UserCurrentStates!
}

type MeetingInvitation {
  meetingId: String!
  inviter: User!
}

type SignInPayload {
  token: String!
  user: User!
}

type UserChannelPayload {
  to: User!
  eventType: UserChannelEventType!
  personalMessage: PersonalMessage
  friendState: UserState
  meetingInvitation: MeetingInvitation
}

enum UserChannelEventType {
  MEETING_INVITATION
  PERSONAL_MESSAGE
  FRIEND_STATUS
}

type Participant {
  _id: ID!
  approvedAt: DateTime
  leftAt: DateTime
  isLeft: Boolean
}

type Meeting {
  _id: ID!
  initiator: User
  participants: [Participant!]
  passCode: String
  meetingInvitationToken: String
  endedAt: DateTime
  needApproval: Boolean
}

type MeetingEdge {
  cursor: String!
  node: Meeting!
}

type MeetingConnection {
  edges: [MeetingEdge!]
  nodes: [Meeting!]
  endCursor: String
  startCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  totalCount: Int
  dataCountInPage: Int
}

type JoinMeetingApproval {
  joinerId: ID!
  approval: Boolean!
}

type MeetingMessage {
  content: String
  sentAt: DateTime
}

type MeetingEventsPayload {
  type: MeetingEventType!
  from: User!
  toMeeting: Meeting
  message: MeetingMessage
  userToBeKickedOut: User
  joinApproval: JoinMeetingApproval
}

enum MeetingEventType {
  JOIN_REQUEST
  JOIN_RESPONSE
  MESSAGE
  KICK_USER
  END_MEETING
  LEAVE_MEETING
}

type Query {
  user(email: String, _id: ID): User
  users(connectionArgs: ConnectionArgs): UserConnection
  me: User!
  healthCheck: Boolean!
  meeting(meetingId: ID!): Meeting
  meetings(joinerId: ID, initiatorId: ID, connectionArgs: ConnectionArgs!): MeetingConnection!
}

input ConnectionArgs {
  first: Int
  after: String
  last: Int
  before: String
  offset: Int
  sortBy: String
  sortOrder: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

type Mutation {
  signUp(signUpInput: SignUpInput!): User
  signIn(signInInput: SignInInput!): SignInPayload
  signOut: Boolean
  updateUser(updateUserInput: UpdateUserInput!): User
  checkUser(id: ID!): String!
  createMeeting(createMeetingInput: CreateMeetingInput!): Meeting
  joinMeeting(joinMeetingInput: JoinMeetingInput!): Meeting
  endMeeting(meetingId: ID!): Meeting
  leaveMeeting(meetingId: ID!): Meeting
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  type: UserType!
}

input SignInInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  _id: String
  firstName: String
  lastName: String
  email: String
}

input CreateMeetingInput {
  initiatorId: ID!
  passCode: String
  needApproval: Boolean
}

input JoinMeetingInput {
  meetingId: ID!
  joinerId: ID!
  passCode: String
}

type Subscription {
  testForUser(userId: ID!): String
  userChannel(userId: ID!): UserChannelPayload!
  meetingChannel(meetingId: ID!, userId: ID!): MeetingEventsPayload!
}
