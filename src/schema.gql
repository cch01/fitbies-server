# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  nickname: String
  firstName: String
  lastName: String
  email: String
  type: UserType
  status: UserStatus
  isActivated: Boolean
  registeredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserType {
  CLIENT
  ADMIN
}

enum UserStatus {
  ONLINE
  IN_A_MEETING
  OFF_LINE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserEdge {
  cursor: String!
  node: User!
}

type UserConnection {
  edges: [UserEdge!]
  nodes: [User!]
  endCursor: String
  startCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  totalCount: Int
  dataCountInPage: Int
}

type SignInPayload {
  token: String!
  user: User!
}

type Participant {
  _id: ID!
  approvedAt: DateTime
  leftAt: DateTime
  isLeft: Boolean
}

type Meeting {
  _id: ID!
  initiator: User
  participants: [Participant!]
  passCode: String
  meetingInvitationToken: String
  endedAt: DateTime
  needApproval: Boolean
}

type MeetingEdge {
  cursor: String!
  node: Meeting!
}

type MeetingConnection {
  edges: [MeetingEdge!]
  nodes: [Meeting!]
  endCursor: String
  startCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  totalCount: Int
  dataCountInPage: Int
}

type Query {
  user(email: String, _id: ID): User
  users(connectionArgs: ConnectionArgs): UserConnection
  me: User!
  healthCheck: Boolean!
  meeting(meetingId: String!): Meeting
  meetings(joinerId: String, initiatorId: String, connectionArgs: ConnectionArgs!): MeetingConnection!
}

input ConnectionArgs {
  first: Int
  after: String
  last: Int
  before: String
  offset: Int
  sortBy: String
  sortOrder: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

type Mutation {
  signUp(signUpInput: SignUpInput!): User
  signIn(signInInput: SignInInput!): SignInPayload
  updateUser(updateUserInput: UpdateUserInput!): User
  checkUser(id: String!): String!
  createMeeting(createMeetingInput: CreateMeetingInput!): Meeting
  joinMeeting(joinMeetingInput: JoinMeetingInput!): Meeting
  endMeeting(meetingId: String!): Meeting
  leaveMeeting(meetingId: String!): Meeting
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  type: UserType!
}

input SignInInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  _id: String
  firstName: String
  lastName: String
  email: String
}

input CreateMeetingInput {
  initiatorId: ID!
  passCode: String
  needApproval: Boolean
}

input JoinMeetingInput {
  meetingId: ID!
  joinerId: ID!
  passCode: String
}

type Subscription {
  testForUser: String
}
