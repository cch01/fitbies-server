# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  nickname: String
  firstName: String
  lastName: String
  email: String
  type: UserType
  status: UserCurrentStates
  isActivated: Boolean
  activatedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserType {
  CLIENT
  ADMIN
  ANONYMOUS_CLIENT
}

enum UserCurrentStates {
  ONLINE
  MEETING
  OFFLINE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserEdge {
  cursor: String!
  node: User!
}

type UserConnection {
  edges: [UserEdge!]
  nodes: [User!]
  endCursor: String
  startCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  totalCount: Int
  dataCountInPage: Int
}

type PersonalMessage {
  from: User!
  to: ID!
  content: String!
  sentAt: DateTime!
}

type UserState {
  user: User!
  state: UserCurrentStates!
}

type MeetingInvitation {
  meetingId: String!
  inviter: User!
}

type SignInPayload {
  token: String!
  user: User!
}

type UserChannelPayload {
  to: User!
  eventType: UserChannelEventType!
  personalMessage: PersonalMessage
  friendState: UserState
  meetingInvitation: MeetingInvitation
}

enum UserChannelEventType {
  MEETING_INVITATION
  PERSONAL_MESSAGE
  FRIEND_STATUS
}

type Participant {
  _id: ID!
  nickname: String
  videoOff: Boolean
  muted: Boolean
  joinedAt: DateTime
  leftAt: DateTime
  isLeft: Boolean
}

type Meeting {
  _id: ID!
  peerRoomId: String
  meetingId: String
  initiator: User
  participants: [Participant!]
  muted: Boolean
  videoOff: Boolean
  blockList: [ID!]
  passCode: String
  endedAt: DateTime
}

type MeetingEdge {
  cursor: String!
  node: Meeting!
}

type MeetingConnection {
  edges: [MeetingEdge!]
  nodes: [Meeting!]
  endCursor: String
  startCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  totalCount: Int
  dataCountInPage: Int
}

type MeetingMessage {
  content: String
  sentAt: DateTime
}

type MeetingSettings {
  muted: Boolean!
  videoOff: Boolean!
}

type ParticipantSettings {
  participantId: String!
  muted: Boolean!
  videoOff: Boolean!
}

type MeetingChannelPayload {
  type: MeetingEventType!
  from: User!
  toMeeting: Meeting
  message: MeetingMessage
  userToBeKickedOut: User
  meetingSettings: MeetingSettings
  participantSettings: ParticipantSettings
}

enum MeetingEventType {
  USER_JOINED
  MESSAGE
  BLOCK_USER
  END_MEETING
  LEAVE_MEETING
  TOGGLE_MEETING_SETTINGS
  TOGGLE_PARTICIPANT_SETTINGS
}

type Query {
  user(email: String, _id: ID): User
  users(connectionArgs: ConnectionArgs): UserConnection
  me: User!
  healthCheck: Boolean!
  meeting(meetingId: String!): Meeting
  meetings(joinerId: ID, initiatorId: ID, connectionArgs: ConnectionArgs!): MeetingConnection!
}

input ConnectionArgs {
  first: Int
  after: String
  last: Int
  before: String
  offset: Int
  sortBy: String
  sortOrder: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

type Mutation {
  signUp(signUpInput: SignUpInput!): User
  activateAccount(token: String!): User
  resendActivationEmail(userId: ID!): User
  anonymousSignUp(anonymousSignUpInput: AnonymousSignUpInput!): User!
  upgradeAnonymousUser(upgradeAnonymousUserInput: UpgradeAnonymousUserInput!): User!
  signIn(signInInput: SignInInput!): SignInPayload
  signOut: Boolean
  updateUser(updateUserInput: UpdateUserInput!): User
  resetPassword(resetPasswordInput: ResetPasswordInput!): User
  hostMeeting(hostMeetingInput: HostMeetingInput!): Meeting
  toggleParticipantMicAndCam(toggleParticipantMicAndCamInput: ToggleParticipantMicAndCamInput!): Meeting
  toggleMeetingMicAndCam(toggleMeetingMicAndCamInput: ToggleMeetingMicAndCamInput!): Meeting
  joinMeeting(joinMeetingInput: JoinMeetingInput!): Meeting
  endMeeting(userId: ID!, meetingId: String!): Meeting
  leaveMeeting(userId: ID!, meetingId: String!): Meeting!
  blockMeetingUser(blockUserInput: BlockUserInput!): Meeting!
  unblockMeetingUser(blockUserInput: BlockUserInput!): Meeting!
  sendMeetingMessage(sendMeetingMessageInput: SendMeetingMessageInput!): MeetingMessage!
  inviteMeeting(inviteMeetingInput: InviteMeetingInput!): Meeting!
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  nickname: String!
}

input AnonymousSignUpInput {
  nickname: String!
}

input UpgradeAnonymousUserInput {
  userId: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  nickname: String
}

input SignInInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  _id: String
  firstName: String
  lastName: String
  email: String
}

input ResetPasswordInput {
  email: String!
  oldPassword: String!
  newPassword: String!
  confirmPassword: String!
}

input HostMeetingInput {
  initiatorId: ID!
  passCode: String
  meetingMuted: Boolean!
  meetingVideoOff: Boolean!
}

input ToggleParticipantMicAndCamInput {
  participantId: String!
  meetingId: String!
  muted: Boolean!
  videoOff: Boolean!
}

input ToggleMeetingMicAndCamInput {
  meetingId: String!
  videoOff: Boolean!
  muted: Boolean!
}

input JoinMeetingInput {
  meetingId: String!
  joinerId: ID!
  passCode: String
}

input BlockUserInput {
  meetingId: String!
  targetUserId: ID!
  initiatorId: ID!
}

input SendMeetingMessageInput {
  userId: ID!
  content: String!
  meetingId: String!
}

input InviteMeetingInput {
  userId: ID
  email: String
  meetingId: String!
}

type Subscription {
  userChannel(userId: ID!): UserChannelPayload!
  meetingChannel(meetingId: String!, userId: ID!): MeetingChannelPayload!
}
